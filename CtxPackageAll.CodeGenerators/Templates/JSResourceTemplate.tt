<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".js" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
   var inputDataFilePath =@"$inputDataFilename$";
       
#>
var Vision = Vision || {};
Vision.Resources = Vision.Resources || {};
<# 
	if(File.Exists(inputDataFilePath))
	{
		var xmlDoc = new XmlDocument();
		xmlDoc.Load(inputDataFilePath);

		foreach(XmlNode node in xmlDoc.SelectNodes("resources/resource"))
		{
				var keyAttr = node.Attributes["key"];
                var valueNode = node.ChildNodes.OfType<XmlNode>().FirstOrDefault(c => c.LocalName == "value");
                var valueAttr = node.Attributes["value"];
                if (keyAttr != null && (valueNode != null || valueAttr != null))
                {
                    var key = keyAttr.Value;
                    var value = valueNode != null ? valueNode.InnerText : valueAttr.Value;
					var cSharpPropertyName = Helper.FormatPropertyName(key);
				#>Vision.Resources.<#=cSharpPropertyName#> = "<#=value#>";
<#
				}
		}
	}
#>
<#+ 
   class Helper
   {
	   static readonly Dictionary<string,string> toBeReplacedDictionary = new Dictionary<string,string>();
	   static Helper()
	   {
			toBeReplacedDictionary.Add(".","_");	
			toBeReplacedDictionary.Add(" ","_");	    
	   }

	   public static string FormatPropertyName(string resourceKey)
	   { 
			if(!string.IsNullOrEmpty(resourceKey))
			{
				var result = resourceKey;
				var firstLetter = result.ToLower()[0];
				if(firstLetter<'a' || firstLetter>'z')
				{
				    result = "_" + result;
				}
				foreach(var key in toBeReplacedDictionary.Keys)
				{
					result = result.Replace(key, toBeReplacedDictionary[key]);
				}
				return result;
			}
			return string.Empty;
	   }
   
   }
#>
