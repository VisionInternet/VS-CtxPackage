<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
   var namespaceStr = "$namespace$";
   namespaceStr = "Vision.Cms.Resources";
   var inputDataFilePath =@"$inputDataFilename$";

   var partialClassName="CmsResourceManager";
   
#>
using Vision.Cms.Common;
namespace <#= namespaceStr #>
{
	  public partial class <#=partialClassName#>
	  {<# 
	      var specailLetter ="#";
		  if(File.Exists(inputDataFilePath))
		  {
			  var xmlDoc = new XmlDocument();
			  xmlDoc.Load(inputDataFilePath);

			  foreach(XmlNode node in xmlDoc.SelectNodes("resources/resource"))
			  {
					  var keyAttr = node.Attributes["key"];
                      var valueNode = node.ChildNodes.OfType<XmlNode>().FirstOrDefault(c => c.LocalName == "value");
                      var valueAttr = node.Attributes["value"];
                      if (keyAttr != null && (valueNode != null || valueAttr != null))
                      {
                          var key = keyAttr.Value;
                          var value = valueNode != null ? valueNode.InnerText : valueAttr.Value;
					      var cSharpPropertyName = Helper.FormatPropertyName(key);
					  #>

            <#=specailLetter#>region <#=cSharpPropertyName#>
			public const string <#=cSharpPropertyName#>_Name = "<#=cSharpPropertyName#>";
			public const string <#=cSharpPropertyName#>_Key = "<#=key#>";
			private static string _<#=cSharpPropertyName#> = null;
			public static string <#=cSharpPropertyName#>
			{
				get
				{
					if (_<#=cSharpPropertyName#> == null)
					{
						_<#=cSharpPropertyName#> = Current.GetResource(<#=cSharpPropertyName#>_Key);
					}
					return _<#=cSharpPropertyName#>;
				}
			}
			<#=specailLetter#>endregion
					  <#
					  }
			  }
		  }
	      #>

	  }
}
<#+ 
   class Helper
   {
	   static readonly Dictionary<string,string> toBeReplacedDictionary = new Dictionary<string,string>();
	   static Helper()
	   {
			toBeReplacedDictionary.Add(".","_");	
			toBeReplacedDictionary.Add(" ","_");	    
	   }

	   public static string FormatPropertyName(string resourceKey)
	   { 
			if(!string.IsNullOrEmpty(resourceKey))
			{
				var result = resourceKey;
				var firstLetter = result.ToLower()[0];
				if(firstLetter<'a' || firstLetter>'z')
				{
				    result = "_" + result;
				}
				foreach(var key in toBeReplacedDictionary.Keys)
				{
					result = result.Replace(key, toBeReplacedDictionary[key]);
				}
				return result;
			}
			return string.Empty;
	   }
   
   }
#>